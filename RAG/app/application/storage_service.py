# app/application/services/storage_service.py
import os
import mimetypes
from typing import Optional
from app.core.domain.ports.storage_port import StoragePort

class StorageService:
    """
    Application layer service that orchestrates document-related workflows.
    It validates inputs and delegates persistence to the StoragePort.
    """

    def __init__(self, storage_port: StoragePort) -> None:
        self._storage = storage_port
        # Limite de tamaño de archivo en bytes (por ejemplo, 20 MB) (se puede configurar vía env)
        self._max_bytes = int(os.getenv("UPLOAD_MAX_BYTES", str(20 * 1024 * 1024)))  # 20 MB

    def _ensure_pdf(self, file_name: str, file_bytes: bytes) -> None:

        # Se confirma tipo de archivo 
        if not file_name.lower().endswith(".pdf"):
            raise ValueError("Only .pdf files are allowed.")

        # Que el archivo no esté vacío y no exceda el tamaño máximo
        if not file_bytes:
            raise ValueError("Empty file.")
        if len(file_bytes) > self._max_bytes:
            raise ValueError(f"File too large. Max allowed is {self._max_bytes} bytes.")

        # Verificación MIME (opcional)
        mime, _ = mimetypes.guess_type(file_name)
        if mime not in ("application/pdf", None):
            # None happens on unknown — we keep extension check as primary
            raise ValueError("Invalid MIME type for PDF.")
        
        
    def upload_document(
        self,
        *,
        client_id: str,
        agent_id: str,
        token_auth: str,
        file_bytes: bytes,
        file_name: str
    ) -> str:
        """
        Validates inputs and delegates the storage to the StoragePort.
        Returns the object key generated by the Port implementation.
        """
        self._ensure_pdf(file_name, file_bytes)

        object_key = self._storage.save_document_client(
            client_id=client_id,
            agent_id=agent_id,
            token_auth=token_auth,
            file=file_bytes,
            file_name=file_name
        )
        return object_key
